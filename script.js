document.addEventListener("DOMContentLoaded", function () {
    const chatContent = document.querySelector(".chat-content");
    const chatInput = document.getElementById("userInput");
    const chatSendBtn = document.getElementById("sendMessage");
    const emojiPanel = document.querySelectorAll(".emoji");

    // Crear un objeto de audio para el sonido de notificaci√≥n
    const notificationSound = new Audio("./notificacion/confirmacion.mp3");

    // Funci√≥n para reproducir el sonido
    function playNotificationSound() {
      notificationSound.play();
    }

    // Funci√≥n para agregar mensajes
    function addMessage(message, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.classList.add("message", sender);
      messageDiv.innerHTML = `<p>${message}</p>`;
      chatContent.appendChild(messageDiv);

      // Desplazar al final del chat
      chatContent.scrollTop = chatContent.scrollHeight;

      // Reproducir sonido si el mensaje es del bot
      if (sender === "bot") {
        playNotificationSound();
      }
    }

    // Funci√≥n para obtener la respuesta del bot
    function getBotResponse(userMessage) {
      const lowerMessage = userMessage.toLowerCase();

      const responses = [
        {
          keyword: "hello",
          response: "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?",
        },
        {
          keyword: "comida",
          response: "Como puedo ayudarte con la comida?",
        },
        {
          keyword: "ayuda",
          response:
            "Claro, dime qu√© tipo de ayuda necesitas seleciona 1 soporte en linea",
        },

        {
          keyword: "soporte",
          response: "Estoy aqu√≠ para brindarte soporte t√©cnico.",
        },

        {
          keyword: "hamburguesa",
          response: "¬øCual deseas ordenar?",
        },

        {
          keyword: "üò†",
          response: "¬øPorque est√°s enojado?",
        },

        {
          keyword: "tengo hambre",
          response: "¬øTranquilo que deseas ordenar?",
        },

        {
          keyword: "domicilio",
          response: "¬øEn breve te atenderemos?",
        },

        {
          keyword: "1",
          response:
            "¬øHola soy tu soporte especializado dime en que puedo ayudarte?",
        },

        // Respuesta para saludos
        {
          keyword: "hola",
          response: "¬°Hola! ¬øEn qu√© puedo ayudarte hoy? üëã",
        },

        // Preguntas frecuentes
        {
          keyword: "preguntas frecuentes",
          response:
            "Aqu√≠ tienes las opciones de ayuda:\n1Ô∏è‚É£ Informaci√≥n sobre horarios de entrega\n2Ô∏è‚É£ Preguntas sobre productos\n3Ô∏è‚É£ Conoce m√°s sobre nuestras ofertas",
        },
        {
          keyword: "comida",
          response:
            "¬øTe gustar√≠a ordenar comida? üçîü•§ ¬øEn qu√© puedo ayudarte?",
        },

        // Quejas y reclamos
        {
          keyword: "queja",
          response:
            "Lamentamos que hayas tenido inconvenientes üòî. Por favor, proporciona m√°s detalles para ayudarte con tu queja.",
        },
        {
          keyword: "reclamo",
          response:
            "Estamos aqu√≠ para escucharte. Por favor, cu√©ntanos m√°s sobre tu situaci√≥n para resolverla lo antes posible.",
        },

        // Soporte especializado
        {
          keyword: "soporte",
          response:
            "¬°Claro! Por favor selecciona una de las opciones:\n1Ô∏è‚É£ Soporte t√©cnico especializado\n2Ô∏è‚É£ Informaci√≥n general",
        },

        {
          keyword: "1",
          response:
            "¬°Has seleccionado soporte especializado! Por favor, cu√©ntanos tu problema para ofrecerte una soluci√≥n r√°pida.",
        },

        {
          keyword: "2",
          response:
            "¬°Listo! Te brindaremos informaci√≥n general para ayudarte. ¬øQu√© necesitas saber?",
        },

        // Otras respuestas
        {
          keyword: "hamburguesa",
          response:
            "¬°Excelente elecci√≥n! üçî ¬øQu√© tipo de hamburguesa deseas ordenar hoy?",
        },
        {
          keyword: "tengo hambre",
          response: "¬°Tranquilo! üçΩÔ∏è ¬øQu√© te gustar√≠a pedir?",
        },
        {
          keyword: "domicilio",
          response:
            "En breve atenderemos tu solicitud de domicilio üöÄ. ¬øPuedes proporcionarnos m√°s informaci√≥n?",
        },
        {
          keyword: "ü§¨",
          response:
            "Veo que est√°s molesto üòï. Si algo te preocupa, cu√©ntamelo para ayudarte.",
        },
      ];

      for (const { keyword, response } of responses) {
        if (lowerMessage.includes(keyword)) {
          return response;
        }
      }

      return "Lo siento, no entend√≠ tu mensaje.";
    }

    // Evento para enviar texto
    chatSendBtn.addEventListener("click", () => {
      const userMessage = chatInput.value.trim();
      if (userMessage) {
        addMessage(userMessage, "user");
        chatInput.value = "";

        setTimeout(() => {
          const botResponse = getBotResponse(userMessage);
          addMessage(botResponse, "bot");
        }, 1000);
      }
    });

    // Evento para enviar emojis
    emojiPanel.forEach((emoji) => {
      emoji.addEventListener("click", function () {
        const emojiMessage = emoji.innerText;
        addMessage(emojiMessage, "user");

        setTimeout(() => {
          const botResponse = getBotResponse(emojiMessage);
          addMessage(botResponse, "bot");
        }, 1000);
      });
    });
  });



   // panel de emoji
   document
   .getElementById("toggleEmojiPanel")
   .addEventListener("click", function () {
     const emojiPanel = document.getElementById("emojiPanel");
     emojiPanel.classList.toggle("hidden");
   });



   document.addEventListener("DOMContentLoaded", function () {
    const modalContent = document.getElementById("chatbotModalContent");
    const modalHeader = document.getElementById("chatbotModalHeader");

    let isDragging = false;
    let offsetX = 0;
    let offsetY = 0;

    modalHeader.addEventListener("mousedown", (e) => {
      isDragging = true;
      offsetX = e.clientX - modalContent.offsetLeft;
      offsetY = e.clientY - modalContent.offsetTop;

      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    });

    const onMouseMove = (e) => {
      if (!isDragging) return;

      const left = e.clientX - offsetX;
      const top = e.clientY - offsetY;

      modalContent.style.left = `${left}px`;
      modalContent.style.top = `${top}px`;
    };

    const onMouseUp = () => {
      isDragging = false;
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };
  });